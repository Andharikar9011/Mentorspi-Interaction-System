#!/usr/bin/env node
/* eslint-disable no-use-before-define */

/**
 * Module dependencies.
*/
if(! process.env.NODE_ENV || process.env.NODE_ENV !== "production") {
  const dotenv = require("dotenv").config()
}

const debug = require('debug')('mentorship:server:www');
const http = require('http');
// const session = require('express-session');
const app = require('../server');

const mongoose = require('mongoose');
// mongoose collection
mongoose.connect(process.env.MongoURL,{
  useNewUrlParser:true,
  useUnifiedTopology:true,
  useCreateIndex:true
})
// chat modal
const Chat = mongoose.model('Chat', { id:Number,chats:Array });


/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '8081');
app.set('port', port);

/**
 * Create HTTP server.
 */
// making socketio to listen to server
const server = http.createServer(app);
const io = require('socket.io')(server);

var chathistory = new Array;
io.on('connect', (socket) => {
  socket.on('message',(data)=>{
    console.log(data)
    //add all chat history here
    Chat.find({id:1})
    .then((result) =>{
      // if(result=[]){
      //   socket.emit('server',{data:['Chat History Unavailable']})
      // }else{
      // console.log(typeof(result[0].chats))
      // var values1 = Object.values(result[0].chats)
      // console.log(typeof(values1))
      // console.log(values1)
       chathistory=result[0].chats;
      // console.log(typeof(result[0].chats))
      socket.emit('server',{data: result[0].chats})
      // }
    }).catch((err)=>{
      console.log(err)
      socket.emit('server',{data:['Chat History Unavailable']})
    })

    socket.on('newmessagetoServer',(message)=>{
      console.log(message)
      chathistory.push(message.text)
      Chat.updateOne( {id:1},{ $set:{chats:chathistory}},{upsert:true,new:true,setDefaultsOnInsert:true}).then((result) => console.log(result)).catch(err=>{console.log(err)})
      io.emit('messagetoClients',{mgs:message.text})
      // databse import mongodb connector

    })


  })
  

  // const session = socket.request.session;
  // console.log(`saving sid ${socket.id} in session ${session.id}`);
  // session.socketId = socket.id;
  // session.save();
});
  
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
  console.log(`Listening on ${bind}`);
}
