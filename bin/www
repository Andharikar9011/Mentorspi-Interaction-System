#!/usr/bin/env node
/* eslint-disable no-use-before-define */

/**
 * Module dependencies.
*/
if(! process.env.NODE_ENV || process.env.NODE_ENV !== "production") {
  const dotenv = require("dotenv").config()
}

const debug = require('debug')('mentorship:server:www');
const http = require('http');
const app = require('../server');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '8081');
app.set('port', port);

/**
 * Create HTTP server.
 */
// making socketio to listen to server
const server = http.createServer(app);


  // on connection

  global.io.on('connection',(socket,req)=>{
    console.log(socket)
   socket.emit('welcome','Welcome to websocket server')
   socket.on('message',(msg)=>{
       console.log(msg)
   })
   socket.on('newmessagetoServer',(newdata)=>{
     console.log(newdata);
      global.io.emit('messagetoClients',{message:newdata});
  });
  });
  
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
  console.log(`Listening on ${bind}`);
}
